"use strict";(self.webpackChunkthe_nest_new=self.webpackChunkthe_nest_new||[]).push([[342],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(f,s(s({ref:n},p),{},{components:t})):r.createElement(f,s({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4253:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),s=["components"],i={sidebar_position:1},c="Host Discovery and Service Enumeration",l={unversionedId:"cybersecurity/pentest-notes/foothold/discovery-and-enum",id:"cybersecurity/pentest-notes/foothold/discovery-and-enum",title:"Host Discovery and Service Enumeration",description:"Network Scanning",source:"@site/docs/cybersecurity/pentest-notes/foothold/discovery-and-enum.md",sourceDirName:"cybersecurity/pentest-notes/foothold",slug:"/cybersecurity/pentest-notes/foothold/discovery-and-enum",permalink:"/the-nest/docs/cybersecurity/pentest-notes/foothold/discovery-and-enum",editUrl:"https://github.com/crystalwwj/the-nest/edit/main/docs/cybersecurity/pentest-notes/foothold/discovery-and-enum.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/the-nest/docs/cybersecurity/pentest-notes/intro"},next:{title:"Web",permalink:"/the-nest/docs/cybersecurity/pentest-notes/foothold/web"}},p=[{value:"Network Scanning",id:"network-scanning",children:[{value:"Host discovery",id:"host-discovery",children:[],level:3},{value:"Service Enumeration",id:"service-enumeration",children:[],level:3},{value:"SNMP",id:"snmp",children:[],level:3}],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"host-discovery-and-service-enumeration"},"Host Discovery and Service Enumeration"),(0,a.kt)("h2",{id:"network-scanning"},"Network Scanning"),(0,a.kt)("h3",{id:"host-discovery"},"Host discovery"),(0,a.kt)("p",null,"For nmap, sometimes hosts are configured to block ping scanning. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"-Pn")," flag for this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Quickly ping hosts in subnet with (nmap is slower):\ntime for i in $(seq 1 254); do (ping -c 1 10.120.15.${i} | grep "bytes from" &); done;\n\n# Quick scan to see if hosts are up\nnmap -sn 10.11.1.1-254\n\n# Scan network for hosts with particular port open\nnmap -Pn -p<port> <target networks>\n\n# For large networks use masscan\nsudo masscan -p80 10.11.1.0/24 --rate=1000 -e tap0 --router-ip 10.11.0.1 \n')),(0,a.kt)("p",null,"When scanning for hosts, also try reverse lookup for names:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'for ip in $(seq 50 100); do host 38.100.193.$ip <nameserver-ip>; done | grep -v "not found"\n')),(0,a.kt)("p",null,"You can use DNS to gather information too. Try doing zone transfer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# with dig\ndig axfr @<nameserver-ip> <domain>\n\n# with dnsrecon\ndnsrecon -d megacorpone.com -t axfr\n\n# with host\nhost -l <domain> <nameserver>\n")),(0,a.kt)("h3",{id:"service-enumeration"},"Service Enumeration"),(0,a.kt)("p",null,"For regular TCP scans:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Scan all ports to filter out closed ones\nnmap -sS -p- --min-rate 3000 <IP>\n\n# Scan version, OS, and nse on open ports. For example if 80,443,139,445 were open:\nnmap -sSCV -p<open ports> <IP>\n\n# Scan for vulns on specific ports\nnmap -Pn -p<port> --script vuln 10.10.10.4\n")),(0,a.kt)("p",null,"Scan UDP:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nmap -sU -p- --min-rate 3000 -oA nmap/alludp 10.10.10.105\n")),(0,a.kt)("p",null,"Notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SYN scan(-sS) needs root privs! Add sudo if necessary. Connect scan(-sT) doesn't."),(0,a.kt)("li",{parentName:"ul"},"When scanning with port forwarding or other tunnels, such as with ",(0,a.kt)("inlineCode",{parentName:"li"},"proxychains"),", use ",(0,a.kt)("inlineCode",{parentName:"li"},"-sT")," because SOCKS proxy can't use SYN scan and ",(0,a.kt)("inlineCode",{parentName:"li"},"-Pn")," because ICMP is blocked!")),(0,a.kt)("h3",{id:"snmp"},"SNMP"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"SNMP is based on UDP, a simple, stateless protocol, and is therefore susceptible to IP spoofing and replay attacks. In addition, the commonly used SNMP protocols 1, 2, and 2c offer no traffic encryption, meaning that SNMP information and credentials can be easily intercepted over a local network. Traditional SNMP protocols also have weak authentication schemes and are commonly left configured with default public and private community strings.")),(0,a.kt)("p",null,"Scanning for hosts with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# nmap scan for open snmp\nsudo nmap -sU --open -p 161 10.11.1.1-254 \n\n# or use onesixtyone (snmp enum tool)\n# save community strings to a file\necho public > community \necho private >> community \necho manager >> community \n\n# save ips to a file\nfor ip in $(seq 1 254); do echo 10.11.1.$ip; done > ips \n\n# enum ips for community strings\nonesixtyone -c community -i ips\n")),(0,a.kt)("p",null,"Enumeration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# must know community string, which is usually "public"\n# enum MIB tree\nsnmpwalk -c public -v1 -t 10 10.11.1.14\n# enum windows user\nsnmpwalk -c public -v1 10.11.1.14 1.3.6.1.4.1.77.1.2.25 \n\n# enum running processes\nsnmpwalk -c public -v1 10.11.1.73 1.3.6.1.2.1.25.4.2.1.2 \n\n# enum open ports\nsnmpwalk -c public -v1 10.11.1.14 1.3.6.1.2.1.6.13.1.3 \n\n# enum installed software\nsnmpwalk -c public -v1 10.11.1.50 1.3.6.1.2.1.25.6.3.1.2\n')))}m.isMDXComponent=!0}}]);